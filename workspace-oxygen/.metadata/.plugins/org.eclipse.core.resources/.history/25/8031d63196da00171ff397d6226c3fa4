package com.betha.projeto_manutencao.service.impl;

import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;

import javax.inject.Inject;
import javax.persistence.NoResultException;
import javax.security.auth.login.AccountException;

import com.betha.projeto_manutencao.model.dto.ClienteResponseDTO;
import com.betha.projeto_manutencao.model.dto.UsuarioResponseDTO;
import com.betha.projeto_manutencao.model.entity.Clientes;
import com.betha.projeto_manutencao.model.entity.Clientes;
import com.betha.projeto_manutencao.model.entity.Clientes;
import com.betha.projeto_manutencao.persistence.dao.ClienteDao;
import com.betha.projeto_manutencao.service.ClienteService;

public class ClienteServiceImpl implements ClienteService {
	private static final Logger logger = Logger.getLogger(AccountServiceImpl.class.getName());

	/*@Inject
	private CrudDao<Clientes> dao;
	*/
	@Inject
	private ClienteDao dao;

	@Override
	public List<ClienteResponseDTO> getClientes(String nome) {
		List<Clientes> list = dao.find(nome);
		return list.stream()
			.map(cliente -> new ClienteResponseDTO(cliente.getId(), cliente.getNome(), cliente.getEndereco(), cliente.getTelefone(), cliente.getEmail()))
			.collect(Collectors.toList());
	}

	@Override
	public String create(ClienteResponseDTO dto) throws AccountException {
		Clientes cliente = resolveUsuario(dto);
		
		if (cliente.getNome() != null) {
			logger.log(Level.WARNING, "Login duplicado: " + cliente.getUsuario());
			throw new AccountException("Login duplicado.");
		}
		dao.create(cliente);
		return "OK";
	}
	
	Clientes resolveUsuario(final ClienteResponseDTO dto) {
		final Clientes cliente = buscaClientes(dto.getUsuario());
		return cliente == null ? criaUsuario(dto) : cliente;
	}
	
	Clientes buscaClientes(final String clientes) {
		try {
			return dao.findByName(clientes);
		} catch (NoResultException e) {
			return null;
		}
	}
	

	@Override
	public ClienteResponseDTO findById(String id) {
		// TODO Auto-generated method stub
		return null;
	}

}
