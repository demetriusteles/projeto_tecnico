package com.betha.projeto_manutencao.service.impl;

import java.util.Calendar;
import java.util.List;
import java.util.logging.Logger;
import java.util.stream.Collectors;

import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.persistence.NoResultException;

import com.betha.projeto_manutencao.model.dto.PedidoResponseDTO;
import com.betha.projeto_manutencao.model.entity.Clientes;
import com.betha.projeto_manutencao.model.entity.Pedidos;
import com.betha.projeto_manutencao.persistence.dao.CrudDao;
import com.betha.projeto_manutencao.persistence.dao.PedidoDao;
import com.betha.projeto_manutencao.service.PedidoService;

@Stateless
public class PedidoServiceImpl implements PedidoService {
	private static final Logger logger = Logger.getLogger(PedidoServiceImpl.class.getName());

	private static final String ENTRADA = "Entrada";
	private static final String AGUARDANDO_CONFIRMACAO = "Aguardando confirmação";
	
	@Inject
	private PedidoDao dao;

	@Inject
	private CrudDao<Clientes> daoCliente;

	@Override
	public String create(PedidoResponseDTO dto) throws Exception {
		Pedidos maquina = criaOrdem(dto);
		dao.create(maquina);
		return "OK";
	}

	Pedidos criaOrdem(final PedidoResponseDTO dto) {
		final Pedidos maq = new Pedidos();
		maq.setMarca(dto.getMarca());
		maq.setTipoMaquina(dto.getTipoMaquina());
		maq.setProblema(dto.getProblema());
		maq.setIdCliente(daoCliente.findById(dto.getIdCliente()));
		maq.setDtEntrada(Calendar.getInstance());
		maq.setStatus(ENTRADA);
		maq.setFoto(null);
		return maq;
	}

	@Override
	public PedidoResponseDTO findById(Integer id) throws Exception{
		try {
			Pedidos pedido = dao.findById(id);
			return new PedidoResponseDTO(pedido.getTipoMaquina(), pedido.getMarca(), pedido.getProblema(),
					pedido.getIdCliente().getId(), pedido.getDtEntrada(), pedido.getFoto(), pedido.getStatus());
		} catch (NoResultException e) {
			logger.severe(e.getMessage());
			throw new Exception(id + " não encontrado");
		}
	}

	@Override
	public List<PedidoResponseDTO> getPedidos(String marca) {
		List<Pedidos> list = dao.find(marca);
		return list.stream()
				.map(pedido -> new PedidoResponseDTO(pedido.getTipoMaquina(), pedido.getMarca(), pedido.getProblema(),
						pedido.getIdCliente().getId(), pedido.getDtEntrada(), pedido.getFoto(), pedido.getStatus()))
				.collect(Collectors.toList());
	}

	@Override
	public List<PedidoResponseDTO> findByStatus(String status) {
		List<Pedidos> list = dao.findByStatus(status);
		return list.stream()
				.map(pedido -> new PedidoResponseDTO(pedido.getTipoMaquina(), pedido.getMarca(), pedido.getProblema(),
						pedido.getIdCliente().getId(), pedido.getDtEntrada(), pedido.getFoto(), pedido.getStatus()))
				.collect(Collectors.toList());
	}

	@Override
	public List<PedidoResponseDTO> findByClientes(String nome) {
		List<Pedidos> list = dao.findByClientes(nome);
		return list.stream()
				.map(pedido -> new PedidoResponseDTO(pedido.getTipoMaquina(), pedido.getMarca(), pedido.getProblema(),
						pedido.getIdCliente().getId(), pedido.getDtEntrada(), pedido.getFoto(), pedido.getStatus()))
				.collect(Collectors.toList());
	}

	@Override
	public PedidoResponseDTO pegaPedido(PedidoResponseDTO dto) throws Exception {
		try {
			Pedidos pedido = dao.findById(dto.getId());
			if (pedido.getStatus().equalsIgnoreCase(ENTRADA)) {
				pedido.setDtEntrada(Calendar.getInstance());
				pedido.setFoto(dto.getFoto());
				pedido.setStatus(AGUARDANDO_CONFIRMACAO);
				dao.update(pedido);
			}
			return new PedidoResponseDTO(pedido.getTipoMaquina(), pedido.getMarca(), pedido.getProblema(),
					pedido.getIdCliente().getId(), pedido.getDtEntrada(), pedido.getFoto(), pedido.getStatus());
		} catch (NoResultException e) {
			logger.severe(e.getMessage());
			throw new Exception("Pedido " + id + " não encontrado");
		}
	}

}
